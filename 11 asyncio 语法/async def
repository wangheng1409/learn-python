# !/usr/bin/env python
# -*- coding:utf-8 -*-

#async def
#async def 定义的是一个原生协程函数，而调用协程函数得到的返回值才是协程

async def read_data(db):
    data=await db.fetch('select * from db1')
    pass

#type(read_data) ,function,原生协程函数

#core=read_data(db)  type(core) coroutine 协程

async def func():
    await read_data(1)

#awaitable 对象有以下几种：
#   调用原生协程函数返回的原生协程
#被 @asyncio.coroutine 装饰的生成器函数调用返回的生成器协程
#实现了__await__方法的对象
#     __await_必须返回迭代器，否则会报typeerror，实现了 __await_的对象也被称为类似未来对象

#await 后只能跟awaitable对象，否则会报typeerror，await必须在async def内使用


async def say_hello():
    print('in say_hello')
    return 'Hello'

async def say_word():
    print('in say_word')
    return 'Word'

async def say_helloword():
    print('in say_helloword')
    value=await say_hello()+ await say_word()
    return value

import uvloop
import asyncio

事件循环策略

    # policy=asyncio.get_event_loop_policy() #<asyncio.unix_events._UnixDefaultEventLoopPolicy object at 0x10aa52b00>

    # policy=uvloop.EventLoopPolicy()
    # asyncio.set_event_loop_policy(policy)
    # policy=asyncio.get_event_loop_policy()  #<uvloop.EventLoopPolicy object at 0x10a04bda0>

    #uvloop 的事件循环效率高，asyncio内的事件循环稳定性高

事件循环
    每个python线程可以设置不同的事件循环
    
    获取当前事件循环：
        default_loop=asyncio.get_event_loop()    #一般写这一行就能获取到默认的事件循环
        default_loop=asyncio.get_event_loop_policy().get_event_loop()
        
    设置事件循环：
        asyncio.set_event_loop(loop)
        asyncio.get_event_loop_policy().set_event_loop(loop)
        
    生成事件循环：
        new_loop=asyncio.new_event_loop()
        new_loop=asyncio.get_event_loop_policy().new_event_loop()
    
    注1:同一个进程最好只使用一个事件循环策略，且在多线程下只使用该策略生成的事件循环对象
    注2:python只会为主线设置默认的事件循环策略，以及默认的事件循环，但不会为自线程设置，如果在子线程调用asyicio.get_event_loop()，会报runtimeerrorr
        方法1:在子线程设置新的事件循环对象，new_loop=asyncio.new_event_loop()
        方法2:把主线程的事件循环对象当参数传给子线程
    注3:除了子线程之外，其它地方只需要asyicio.get_event_loop()，得到的就是默认的事件循环
    
    执行完4个任务后退出：   
        import asyncio

        loop=asyncio.get_event_loop()


        for i in range(4):
            loop.create_task(say_hello()) #将协程封装成task对象，并加入loop进行调度
            if i==5:
                loop.stop() #会执行完所有已经加入loop的任务

        loop.run_forever()

    执行完6个任务后退出：
        import asyncio

        loop=asyncio.get_event_loop()


        for i in range(4):
            loop.create_task(say_hello()) #将协程封装成task对象，并加入loop进行调度
        loop.stop()

        for i in range(2):
            loop.create_task(say_hello()) #将协程封装成task对象，并加入loop进行调度
        loop.run_forever()
    结论：只要在run_forever之前加入的所有任务都会被执行

    loop.close()    强制关闭loop，毁灭性的，一般只使用loop.stop()
    注：正在运行中的loop是不能close的
    
    loop.run_until_complete(future) # 运行loop,能够得到协程的返回值


Future:
    区分：
        concurrent.futures.Future:多线程／多进程执行异步任务
        asyncio.Future:单线程执行异步任务
    创建future：
        方式1:fut=asyncio.Future(loop=None) #如果不传None，将使用asyncio.get_event_loop()
        方式2:fut=loop.create_future()
        
        
Task：
    创建：
        1. task = asyncio.Task(coro, *, loop=None)
        2. task = asyncio.ensure_future(coro, *, loop=None) 
        3. task = loop.create_task(coro) # 调用Task类 只接受coro

    区别：
        #传core,asyncio.ensure_future()直接调用create_task()
        asyncio.ensure_future() #传Future,直接return，传Future-like先封装成协程，然后调用create_task()
        create_task()#只接收协程
        
        
同时执行多个协程：
   
        asyncio.wait([say_hello(),say_word()])
            #fs = {ensure_future(f, loop=loop) for f in set(fs)}
            #Returns two sets of Future: (done, pending).
            #Usage:done, pending = yield from asyncio.wait(fs)
            #如果设置timeout，就算Future没有执行完也不会产出TimeoutError




        asyncio.as_completed([say_hello(),say_word()])
            #todo = {ensure_future(f, loop=loop) for f in set(fs)}
            #Return an iterator whose values are coroutines，即 值是协程的可叠带对象
            #会按照完成的顺序得到结果
            #如果设置timeout,当Future没有执行完，将会reaise TimeoutError

        asyncio.gather([say_hello(),say_word()])

            '''
                for arg in set(coros_or_futures):
                    if not futures.isfuture(arg):
                        fut = ensure_future(arg, loop=loop)'''

            '''
            Return a future aggregating results from the given coroutines
                or futures，根据传进来的协程或者Future,返回聚合后的Future result'''

            '''
            All futures must share the same event loop'''
            #如果全部执行成功，就会返回一个不一定按顺序的结果list，如果有异常也会收集异常结果
            
            
 程序计数器：保存将要执行的下一条指令的地址。
 地址寄存器： 程序计数器把地址放入地址寄存器，用于缓存该地址。
 指令寄存器：用于缓存从存储器中取出的指令。
 指令译码器： 指令寄存器交给的指令，对指令语义进行解析，然后把结果给操作控制器和时序逻辑产生器，来产生相应的控制信号。
 
 add为例：
     程序计数器（保存下一个指令的地址，把指令地址发送给地址寄存器）--地址寄存器（到相应的存储单元取指令，放入指令寄存器）
     --指令寄存器（交给指令译码器，进行译码）--add是地址，传回地址寄存器--地址寄存器去存储单元取操作数--把操作数放入缓冲寄存器
     --操作控制器产生相应控制信号给算数逻辑单元ALU--ALU完成运算放入累加器
 
程序执行过程：
    程序--编译（汇编）--机器码
    内存区
        代码区：待执行的代码
        数据区：待执行的数据
        代码区每执行一条指令，程序计数器指向下一条指令
 
 
 
    

     
    
    

    
    
    
        
    
   
    
    
    
    
        
    
    
  





